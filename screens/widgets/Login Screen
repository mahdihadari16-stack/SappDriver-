#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Login Screen - SappDriver Application
"""

from kivy.uix.screen import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.uix.image import Image
from kivy.logger import Logger
from kivy.animation import Animation
from kivy.clock import Clock

from widgets.custom_widgets import (
    CustomButton, 
    CustomLabel, 
    LoadingSpinner,
    StatusCard
)
from utils.database import DatabaseManager
from utils.helpers import validate_email, hash_password


class CustomTextInput(TextInput):
    """
    Enhanced TextInput with modern styling
    """
    
    def __init__(self, **kwargs):
        default_kwargs = {
            'multiline': False,
            'size_hint_y': None,
            'height': 45,
            'padding': [15, 12],
            'font_size': 16,
            'background_color': (0.95, 0.95, 0.98, 1),
            'foreground_color': (0.2, 0.2, 0.2, 1),
            'cursor_color': (0.3, 0.6, 0.9, 1)
        }
        default_kwargs.update(kwargs)
        
        super().__init__(**default_kwargs)


class LoginScreen(Screen):
    """
    Login Screen Class - Authentication page
    """
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.db_manager = DatabaseManager()
        self.is_loading = False
        self.build_screen()
        
    def build_screen(self):
        """
        Build the login screen layout
        """
        # Main container
        main_layout = BoxLayout(
            orientation='vertical',
            padding=[30, 50, 30, 30],
            spacing=20
        )
        
        # Add logo section
        self.add_logo_section(main_layout)
        
        # Add login form
        self.add_login_form(main_layout)
        
        # Add action buttons
        self.add_action_buttons(main_layout)
        
        # Add footer
        self.add_footer(main_layout)
        
        self.add_widget(main_layout)
    
    def add_logo_section(self, parent_layout):
        """
        Add logo and app title section
        """
        logo_layout = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            height=150,
            spacing=10
        )
        
        # App logo (placeholder)
        logo_placeholder = Label(
            text='🚗',
            font_size=60,
            size_hint_y=None,
            height=80
        )
        
        # App title
        title_label = CustomLabel(
            text='SappDriver',
            font_size=28,
            bold=True,
            color=(0.2, 0.4, 0.8, 1),
            size_hint_y=None,
            height=40
        )
        
        # Subtitle
        subtitle_label = CustomLabel(
            text='به اپلیکیشن خود خوش آمدید',
            font_size=14,
            color=(0.5, 0.5, 0.5, 1),
            size_hint_y=None,
            height=30
        )
        
        logo_layout.add_widget(logo_placeholder)
        logo_layout.add_widget(title_label)
        logo_layout.add_widget(subtitle_label)
        
        parent_layout.add_widget(logo_layout)
    
    def add_login_form(self, parent_layout):
        """
        Add login form with email and password fields
        """
        form_layout = BoxLayout(
            orientation='vertical',
            spacing=15,
            size_hint_y=None,
            height=200
        )
        
        # Email field
        email_label = CustomLabel(
            text='ایمیل:',
            size_hint_y=None,
            height=25,
            color=(0.3, 0.3, 0.3, 1),
            halign='right'
        )
        
        self.email_input = CustomTextInput(
            hint_text='example@email.com',
            input_filter='',
            keyboard_mode='email'
        )
        
        # Password field
        password_label = CustomLabel(
            text='رمز عبور:',
            size_hint_y=None,
            height=25,
            color=(0.3, 0.3, 0.3, 1),
            halign='right'
        )
        
        self.password_input = CustomTextInput(
            hint_text='رمز عبور خود را وارد کنید',
            password=True
        )
        
        # Status message
        self.status_label = CustomLabel(
            text='',
            size_hint_y=None,
            height=30,
            color=(0.8, 0.3, 0.3, 1)
        )
        
        form_layout.add_widget(email_label)
        form_layout.add_widget(self.email_input)
        form_layout.add_widget(password_label)
        form_layout.add_widget(self.password_input)
        form_layout.add_widget(self.status_label)
        
        parent_layout.add_widget(form_layout)
    
    def add_action_buttons(self, parent_layout):
        """
        Add login and register buttons
        """
        button_layout = BoxLayout(
            orientation='vertical',
            spacing=10,
            size_hint_y=None,
            height=120
        )
        
        # Login button
        self.login_btn = CustomButton(
            text='ورود',
            background_color=(0.3, 0.7, 0.3, 1),
            font_size=18
        )
        self.login_btn.bind(on_release=self.handle_login)
        
        # Register button
        self.register_btn = CustomButton(
            text='ثبت‌نام',
            background_color=(0.7, 0.4, 0.2, 1),
            font_size=16
        )
        self.register_btn.bind(on_release=self.handle_register)
        
        button_layout.add_widget(self.login_btn)
        button_layout.add_widget(self.register_btn)
        
        parent_layout.add_widget(button_layout)
    
    def add_footer(self, parent_layout):
        """
        Add footer with additional options
        """
        footer_layout = BoxLayout(
            orientation='vertical',
            spacing=10,
            size_hint_y=None,
            height=80
        )
        
        # Forgot password
        forgot_btn = CustomButton(
            text='فراموشی رمز عبور؟',
            background_color=(0, 0, 0, 0),
            color=(0.3, 0.6, 0.9, 1),
            size_hint_y=None,
            height=35
        )
        forgot_btn.bind(on_release=self.forgot_password)
        
        # Guest login
        guest_btn = CustomButton(
            text='ورود به عنوان مهمان',
            background_color=(0.6, 0.6, 0.6, 1),
            size_hint_y=None,
            height=35
        )
        guest_btn.bind(on_release=self.guest_login)
        
        footer_layout.add_widget(forgot_btn)
        footer_layout.add_widget(guest_btn)
        
        parent_layout.add_widget(footer_layout)
    
    def on_enter(self):
        """
        Called when screen is entered
        """
        Logger.info("LoginScreen: Entered login screen")
        self.animate_entrance()
        self.clear_form()
    
    def animate_entrance(self):
        """
        Animate screen entrance
        """
        self.opacity = 0
        anim = Animation(opacity=1, duration=0.6)
        anim.start(self)
    
    def clear_form(self):
        """
        Clear form fields and status
        """
        self.email_input.text = ''
        self.password_input.text = ''
        self.status_label.text = ''
    
    def validate_inputs(self):
        """
        Validate user inputs
        
        Returns:
            tuple: (is_valid, error_message)
        """
        email = self.email_input.text.strip()
        password = self.password_input.text.strip()
        
        if not email:
            return False, "لطفاً ایمیل خود را وارد کنید"
        
        if not validate_email(email):
            return False, "فرمت ایمیل صحیح نمی‌باشد"
        
        if not password:
            return False, "لطفاً رمز عبور خود را وارد کنید"
        
        if len(password) < 6:
            return False, "رمز عبور باید حداقل ۶ کاراکتر باشد"
        
        return True, ""
    
    def show_loading(self, show=True):
        """
        Show/hide loading state
        """
        self.is_loading = show
        
        if show:
            self.login_btn.text = 'در حال ورود...'
            self.login_btn.disabled = True
            self.register_btn.disabled = True
        else:
            self.login_btn.text = 'ورود'
            self.login_btn.disabled = False
            self.register_btn.disabled = False
    
    def show_status_message(self, message, is_error=True):
        """
        Show status message
        
        Args:
            message (str): Message to display
            is_error (bool): Whether it's an error message
        """
        self.status_label.text = message
        self.status_label.color = (0.8, 0.3, 0.3, 1) if is_error else (0.3, 0.7, 0.3, 1)
        
        # Clear message after 3 seconds
        Clock.schedule_once(lambda dt: setattr(self.status_label, 'text', ''), 3)
    
    def handle_login(self, *args):
        """
        Handle login button press
        """
        if self.is_loading:
            return
        
        Logger.info("LoginScreen: Login attempt")
        
        # Validate inputs
        is_valid, error_msg = self.validate_inputs()
        if not is_valid:
            self.show_status_message(error_msg)
            return
        
        # Show loading
        self.show_loading(True)
        
        # Simulate login process (replace with actual authentication)
        def complete_login(dt):
            email = self.email_input.text.strip()
            password = self.password_input.text.strip()
            
            try:
                # Check credentials
                if self.db_manager.authenticate_user(email, password):
                    Logger.info("LoginScreen: Login successful")
                    self.show_status_message("ورود موفقیت‌آمیز بود!", False)
                    
                    # Navigate to main screen after short delay
                    Clock.schedule_once(lambda dt: self.go_to_main(), 1)
                else:
                    Logger.warning("LoginScreen: Invalid credentials")
                    self.show_status_message("ایمیل یا رمز عبور اشتباه است")
                    
            except Exception as e:
                Logger.error(f"LoginScreen: Login error - {e}")
                self.show_status_message("خطا در ورود. لطفاً دوباره تلاش کنید")
            
            finally:
                self.show_loading(False)
        
        # Simulate network delay
        Clock.schedule_once(complete_login, 1.5)
    
    def handle_register(self, *args):
        """
        Handle register button press
        """
        if self.is_loading:
            return
        
        Logger.info("LoginScreen: Register attempt")
        
        # Validate inputs
        is_valid, error_msg = self.validate_inputs()
        if not is_valid:
            self.show_status_message(error_msg)
            return
        
        # Show loading
        self.show_loading(True)
        
        def complete_register(dt):
            email = self.email_input.text.strip()
            password = self.password_input.text.strip()
            
            try:
                # Check if user already exists
                if self.db_manager.user_exists(email):
                    self.show_status_message("این ایمیل قبلاً ثبت شده است")
                    return
                
                # Create new user
                if self.db_manager.create_user(email, password):
                    Logger.info("LoginScreen: Registration successful")
                    self.show_status_message("ثبت‌نام موفقیت‌آمیز بود!", False)
                    
                    # Auto-login after registration
                    Clock.schedule_once(lambda dt: self.go_to_main(), 1)
                else:
                    self.show_status_message("خطا در ثبت‌نام. لطفاً دوباره تلاش کنید")
                    
            except Exception as e:
                Logger.error(f"LoginScreen: Registration error - {e}")
                self.show_status_message("خطا در ثبت‌نام. لطفاً دوباره تلاش کنید")
            
            finally:
                self.show_loading(False)
        
        # Simulate network delay
        Clock.schedule_once(complete_register, 1.5)
    
    def forgot_password(self, *args):
        """
        Handle forgot password
        """
        Logger.info("LoginScreen: Forgot password requested")
        # TODO: Implement forgot password functionality
        self.show_status_message("این قابلیت به زودی اضافه خواهد شد")
    
    def guest_login(self, *args):
        """
        Handle guest login
        """
        Logger.info("LoginScreen: Guest login")
        
        # Set guest mode and go to main screen
        self.db_manager.set_guest_mode(True)
        self.go_to_main()
    
    def go_to_main(self):
        """
        Navigate to main screen
        """
        self.manager.current = "main"
